#!/usr/bin/env bash

# SC2015: You can often see that I use: A && B || C as if-then-else.
# This is generally not correct, if A is true but B is false, C will run.
# But it's safe to use when B is just a variable definition or a command that is never false.

### Global variables ###

# Saving to a variable for easy use in messages.
program_name="$(basename "$0")"

bios_or_uefi="UEFI"        # Set to "BIOS" to install for BIOS systems.
                           # Will switch to BIOS if needed.

disk_to_install="/dev/vda" # Only matters when using "BIOS".
bootloader_id="ArchLinux"  # Only matters when using "UEFI".
efi_directory="/efi"

aurhelper="yay"

# Common username and hostname conventions.
regex_valid_username="^[a-z_][a-z0-9_-]{0,31}$"
regex_valid_hostname="^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$"

# 'verbose=false' should only print messages from the script and suppress all
# the commands that are being executed.
# 'verbose=true' should be as verbose as possible; printing the output
# of all commands that get run.
verbose=false
# When 'verbose=false' where should the suppressed output go?
# This could be log file or just plain '/dev/null/' to destroy the messages.
cmd_suffix=">/dev/null 2>&1"

# URL to dotfiles repository.
dotfiles_url="https://github.com/themamiza/dotfiles"
# Dotfiles repository can have different name e.g. voidrice <https://github.com/lukesmithxyz/voidrice>.
dotfiles_name="$(basename "$dotfiles_url")"

# The script expects a 'programs.csv' file present in the same directory.
# Check 'programs.csv' for formatting.
programs_file="programs.csv"
# Path to a tmp file which will just contain name of programs to install.
programs_to_install="/tmp/programs.tmp"
# URL to raw programs.csv file. Must follow format that's specified in 'programs.csv'.
programs_file_url="https://raw.githubusercontent.com/themamiza/mais/refs/heads/main/programs.csv"

### Functions ###

# NormalPRINT: Print information (can also be notifying) to stdout.
nprint() { printf "%s: %b\n" "$program_name" "$1"; }

# SilentPRINT: Same as 'nprint' but respect 'verbose'.
sprint() { $verbose || return 0; printf "%s: %b\n" "$program_name" "$1"; }

# WarningPRINT: Print warnings to stderr but don't exit.
wprint() { printf "%s: %b\n" "$program_name" "$1" >&2; }

# ErrorPRINT: Print error to stderr and exit with code (second argument).
eprint() {
    local code=${2:-1}
    printf "%s: %b\n" "$program_name" "$1" >&2
    exit "$code"
}

yes_no() {
    local answer
    printf "%s" "$1" && read -r answer && [[ "$answer" == [yY] ]] && return 0
    return 1
}

# Helper function to report incorrect usage.
invalid_option() {
    eprint "Invalid option '$1'
Try '$program_name help' for more information."
}

# Print help message that list all options and flags available.
print_help() {
    printf "Usage: %s [Options]\n\nStill being worked on...\n" "$program_name"
}

# Match the string ($1) to the regular expression ($2)
re_match() { [[ "$1" =~ $2 ]] && return 0 || return 1; }

# Return 0 if running by root, otherwise return 1.
isRoot() { [ "$(id -u)" == 0 ] && return 0 || return 1; }

# Checks a given name against both the executable and package names.
check_installed() {
    # Check if a command is available.
    command -v "$1" >/dev/null 2>&1 && return 0
    # Check if a package is available.
    pacman -Q "$1" >/dev/null 2>&1 && return 0
    # Return false otherwise.
    return 1
}

is_archlinux() { check_installed "pacman" && return 0 || return 1; }

check_internet_connection() {
    local target="google.com"

    if eval "curl -sSf https://$target -o /dev/null $cmd_suffix"; then
        return 0
    elif eval "ping -c1 -W1 $target $cmd_suffix"; then
        return 0
    else
        return 1
    fi
}

# This trap runs when the script terminates in any way.
# Removes the tmp sudoers file that let's any user from the wheel group to execute any command.
# Then stores the normal state and exits.
trap_cleanup_sudoers() {
    eval "rm -f /etc/sudoers.d/mais-tmp $cmd_suffix"

    eval "printf '%%wheel ALL=(ALL:ALL) ALL' | install -m 0440 /dev/stdin /etc/sudoers.d/00-mais-wheel-can-sudo $cmd_suffix"

    nopasswd_commands="/usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Syyu --noconfirm"

    eval "printf '%%wheel ALL=(ALL:ALL) NOPASSWD: $nopasswd_commands\n' | install -m 0440 /dev/stdin /etc/sudoers.d/01-mais-cmds-without-password $cmd_suffix"

    eval "printf 'Defaults editor=/usr/bin/nvim\n' | install -m 0440 /dev/stdin /etc/sudoers.d/02-mais-visudo-editor $cmd_suffix"
}

wheel_can_sudo() {
    eval "rm -f /etc/sudoers.d/*mais* $cmd_suffix"
    # Remove tmp file and restore normal sudoers functionality on exit.
    trap trap_cleanup_sudoers HUP INT QUIT TERM PWR EXIT ILL
    # NOPASSWD during setup
    eval "printf '%%wheel ALL=(ALL) NOPASSWD: ALL\n' | install -m 0440 /dev/stdin /etc/sudoers.d/mais-tmp $cmd_suffix"
}

# In case of there not being a 'programs.csv' download it.
ensure_programs_file() {
    # Look for a local programs_file
    [ -f "${XDG_DATA_HOME:-$HOME/.local/share}/$programs_file" ] && return 0

    # Also look in the same directory for the file
    [ -f "$programs_file" ] && return 0

    nprint "'$programs_file' not found. Downloading it..."

    if ! eval "curl -fssL $programs_file_url -o $programs_file $cmd_suffix"; then
        eprint "Failed to downlaod '$programs_file' from '$programs_file_url'."
    fi
}

# TODO: Make sure device is not mounted before going through the install.
# TODO: Thinking this partitioning function should go inside the configuration file to be made.
# label -> label type: dos/gpt
# size  -> measured in sectors; each sector being 512 bytes.
partition_main() {
    eprint "Not implemented!"
}

partition_x220() {
    case "$bios_or_uefi" in
        "UEFI")
            printf "label: gpt
start=,size=2000000,type=U
start=,size=64000000
start=,size=416000000
start=,size=,type=S\n" | sfdisk /dev/sda --wipe always
        mkfs.fat  -F 32 /dev/sda1
        mkfs.ext4 -qF /dev/sda2
        mkfs.ext4 -qF /dev/sda3
        mkswap /dev/sda4

        mount /dev/sda2 /mnt
        mount --mkdir /dev/sda1 /mnt/efi
        mount --mkdir /dev/sda3 /mnt/home
        swapon /dev/sda4
        ;;

        "BIOS") printf "label: dos
start=,size=64000000
start=,size=\n" | sfdisk /dev/sda --wipe always
        mkfs.ext4 -qF /dev/sda1
        mkfs.ext4 -qF /dev/sda2

        mount /dev/sda1 /mnt
        mount --mkdir /dev/sda2 /mnt/home
        ;;
    esac
}

partition_vm() {
    case "$bios_or_uefi" in
        "UEFI") 
            printf "label: gpt
start=,size=2000000,type=U
start=,size=64000000
start=,size=\n" | sfdisk /dev/vda --wipe always
        mkfs.fat  -F 32 /dev/vda1
        mkfs.ext4 -qF /dev/vda2
        mkfs.ext4 -qF /dev/vda3

        mount /dev/vda2 /mnt
        mount --mkdir /dev/vda1 /mnt/efi
        mount --mkdir /dev/vda3 /mnt/home
        ;;

        "BIOS") printf "label: dos
start=,size=64000000
start=,size=\n" | sfdisk /dev/vda --wipe always
        mkfs.ext4 -qF /dev/vda1
        mkfs.ext4 -qF /dev/vda2

        mount /dev/vda1 /mnt
        mount --mkdir /dev/vda2 /mnt/home
        ;;
    esac
}

# Why do I pass all the variables as arguments? Explained in `arch_install`.
# args: username pass1 hostname timezone bios_or_uefi bootloader_id efi_directory disk_to_install cmd_suffix
# TODO: Fix `arch_install_run_in_chroot` not executing.
arch_install_run_in_chroot() {
    # Renaming vars only for more readability.
    local username="$1"
    local pass1="$2"
    local hostname="$3"
    local timezone="$4"
    local bios_or_uefi="$5"
    local bootloader_id="$6"
    local efi_directory="$7"
    local disk_to_install="$8"
    local cmd_suffix"$9"
    local program_name"${10}"
    
    # TODO: Should this be done during initial installation?
    # if command -v nvim >/dev/null 2>&1; then
    #     if [ ! -e "/usr/bin/vim" ] || [ -L "/usr/bin/vim" ]; then
    #         sprint "Creating symlink: vim -> nvim."
    #         ln -sf /usr/bin/nvim /usr/bin/vim
    #     fi
    #     if [ ! -e "/usr/bin/vi" ] || [ -L "/usr/bin/vi" ]; then
    #         sprint "Creating symlink: vi -> nvim."
    #         ln -sf /usr/bin/nvim /usr/bin/vi
    #     fi
    # fi
    # printf "\n"

    sprint "Setting timezone to '$timezone'.\n"
    ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime

    sprint "Configuring hardware clock."
    hwclock --systohc

    sprint "Configuring locale."
    sed -i 's/^#\s*\(en_US.UTF-8\)/\1/' /etc/locale.gen
    eval "locale-gen $cmd_suffix"
    printf "LANG=en_US.UTF-8\n" > /etc/locale.conf

    sprint "Setting hostname to '$hostname'."
    printf "%s\n" "$hostname" > /etc/hostname

    # TODO: Check if it's actually necessary to run this command.
    # nprint "Creating new initramfs."
    # eval "mkinitcpio -P $cmd_suffix"

    sprint "Installing grub bootloader to /efi."
    case "$bios_or_uefi" in
        "UEFI") eval "grub-install --target=x86_64-efi --efi-directory=$efi_directory --bootloader-id=$bootloader_id $cmd_suffix";;
        "BIOS") eval "grub-install --target=i386-pc $disk_to_install";;
    esac

    sprint "Re-creating grub configuration."
    eval "grub-mkconfig -o /boot/grub/grub.cfg $cmd_suffix"

    nprint "Creating new user '$username'."
    if ! id "$username" >/dev/null 2>&1; then
        useradd --create-home --user-group --groups wheel --shell /bin/bash "$username"
    fi

    sprint "Changing password for new user."
    echo "$username:$pass1" | chpasswd
    unset pass1 pass2

    wheel_can_sudo

    sprint "Enabling NerworkManager."
    eval "systemctl enable NetworkManager $cmd_suffix"

    # This should be the last thing done.
    if [ -f "/etc/installation.date" ]; then
        wprint "'/etc/installation.date' already exists."
        yes_no "Do you wish to overwrite it? (Y/N): " && date > /etc/installation.date
    fi
}

arch_install() {
    printf "The rest of the installation assumes you have
1. an internet connection. \`iwctl\`
2. synchronized system clock. \`timedatectl set-ntp true\`
3. configured your filesystem and mounted your root at '/mnt'. \`fdisk\`\n
SHOULD NOT BE RAN ON AN EXISTING ARCH INSTALLAION!\n\n"
    yes_no "Continue (Y/N): " || exit 0

    ensure_mount_points

    ask_username

    # Get password for said user.
    while true; do
        printf "%s's password: " "$username" && read -rs pass1 && printf "\n"
        printf "Retype password: " && read -rs pass2 && printf "\n"
        [ -n "$pass1" ] && [ "$pass1" = "$pass2" ] && unset pass2 && break
        wprint "Passwords do not match or are empty. Try again."
    done

    ask_hostname

    # Change this so it uses fzf for easier access.
    if [ -z "$timezone" ]; then
        while true; do
            printf "Timezone (Region/City) [UTC]: " && read -r timezone
            timezone="${timezone:-UTC}"
            [ -f "/usr/share/zoneinfo/$timezone" ] && break
            wprint "Timezone not valid. A valid timezone looks like -> \"US/Eastern\""
        done
    fi

    # TODO: Print configuration before installing.
    
    eval "cat /sys/firmware/efi/fw_platform_size $cmd_suffix" || bios_or_uefi="BIOS"

    sprint "Checking internet connection...\n"
    check_internet_connection || eprint "Can't reach the web."
    sprint "Internet connection is available.\n"

    base_packages=(base linux-lts linux-firmware grub networkmanager sudo neovim)
    [ "$bios_or_uefi" = "UEFI" ] && base_packages+=(efibootmgr)
    sprint "Bootstraping the system...\n"
    pacstrap -K /mnt "${base_packages[@]}"
    sprint "Done bootstrapping the system.\n"

    sprint "Generating fstab...\n"
    genfstab -U /mnt >> /mnt/etc/fstab
    sprint "fstab written to /mnt/etc/fstab.\n"

    # Exporting the function to later be passed to arch-chroot as a command.
    # That is why all the variables are passed manually.
    # TODO: Investigate if it can be done any other way.
    # arch_install_run_in_chroot() { # -> args: username pass1 hostname timezone bios_or_uefi bootloader_id efi_directory disk_to_install
    exported_functions=(arch_install_run_in_chroot wheel_can_sudo trap_cleanup_sudoers nprint sprint wprint)
    for fn in "${exported_functions[@]}"; do
        # shellcheck disable=2163
        export -f "$fn"
    done

    arch-chroot /mnt /bin/sh -c "arch_install_run_in_chroot '$username' '$pass1' '$hostname' '$timezone' '$bios_or_uefi' '$bootloader_id' '$efi_directory' '$disk_to_install' '$cmd_suffix' '$program_name'"

    unset pass1 pass2
    yes_no "The system should be ready to reboot, Continue (Y/N): " || exit 0
    reboot
}

clean_programs_file() { 
    # Remove comments and empty lines
    sed 's/[ ]*#.*//g;/^$/d' "$programs_file" > "$programs_file.clean"
    # Remove all whitespace, but keep quoted strings intact
    gawk -i inplace '
        BEGIN {FS = OFS = "\""}
        /^[[:blank:]]*$/ {next}
        {for (i=1; i<=NF; i+=2) gsub (/[[:space:]]/,"",$i)}
        1
        ' "$programs_file.clean"
}

install_package() {
    check_installed "$1" && return 0

    package_info="$(grep "$1" "$programs_file.clean")"

    while IFS="|" read -r method _ _ description; do
        case "$method" in
            "Pacman"|"") pacman_install    "$1" "$description";;
            "AUR")       aur_install       "$1" "$description";;
            "Suckless")  suckless_install  "$1" "$description";;
            "DoomEmacs") doomemacs_install "$1" "$description";;
        esac
    done <<<"$package_info"
}

install_aurhelper() {
    check_installed "$aurhelper" && nprint "'$aurhelper' is already installed." && return 0
    
    nprint "Installing '$aurhelper'."
    local src="/home/$username/.local/src/$aurhelper"
    local git_url="https://aur.archlinux.org/$aurhelper.git"

    sudo -u "$username" mkdir -p "/home/$username/.local/src"

    # shellcheck disable=2086
    if ! sudo -u "$username" sh -c "git clone --depth 1 --single-branch --no-tags '$git_url' '$src' $cmd_suffix"; then
        cd "$src" || exit 1
        sudo -u "$username" sh -c "git pull --force origin master $cmd_suffix"
    fi
    cd "$src" || exit 1
    # shellcheck disable=2086
    sudo -u "$username" sh -c "makepkg --noconfirm -si $cmd_suffix"
}

pacman_install() {
    sprint "Installing $1 -> $2"
    eval "pacman -S --noconfirm '$1' $cmd_suffix"
}

aur_install() {
    sprint "Installing $1 -> $2"
    sudo -u "$username" sh -c "$aurhelper -S --noconfirm $1 $cmd_suffix"
}

# bugged
suckless_install() {
    check_installed "$(basename "$1")" && return 0

    local repo="$1"

    if ! [[ "$repo" =~ ^[^/]+/[^/]+$ ]]; then
        eprint "Invalid suckless repo format: '$repo'. Expected format is 'username/repo'."
    fi

    local src; src="/home/$username/.local/src/$(basename "$repo")"
    local git_url="https://github.com/$repo.git"

    sudo -u "$username" mkdir -p "/home/$username/.local/src"

    # shellcheck disable=2086
    if ! sudo -u "$username" sh -c "git clone --depth 1 --single-branch --no-tags '$git_url' '$src' $cmd_suffix"; then
        cd "$src" || exit 1
        sudo -u "$username" sh -c "git pull --force origin master $cmd_suffix"
    fi
    cd "$src" || exit 1
    # shellcheck disable=2086
    eval "make $cmd_suffix"
    # shellcheck disable=2086
    eval "make install $cmd_suffix"
}

doomemacs_install() {
    eprint "Not implemented!"
}

install_environment() {
    # Create an empty tmp file.
    : > "$programs_to_install"

    # Grab programs and add to tmp file based on the environment that is provided.
    case "$1" in
        "Hyprland") grep -E "Wayland|Hyprland|All" "$programs_file" | cut -d"|" -f3 >> "$programs_to_install";;
        "DWM") grep -E "X11|DWM|All" "$programs_file" | cut -d"|" -f3 >> "$programs_to_install";;
        "All") cut -d"|" -f3  "$programs_file" >> "$programs_to_install";;
    esac

    # Also grab lines that have to environment set (meaning install to every environment).
    awk -F'|' '
      {
        original_line = $0
      }
      NF && $1 !~ /^#/ {
        field2 = $2
        gsub(/^[ \t]+|[ \t]+$/, "", field2)
        if (field2 == "") print original_line
      }
    ' "$programs_file.clean" | cut -d"|" -f3 >> "$programs_to_install"

    while IFS= read -r program; do
        install_package "$program"
    done <"$programs_to_install"
}

# TODO: Check if this function is fully verbosified.
install_dotfiles() {
    local srcdir
    sprint "Installing dotfiles."

    # Mainly for my convenience.
    if [ -d "/home/$username/rp/dotfiles" ]; then
        sprint "Found local dotfiles."
        srcdir="/home/$username/rp/dotfiles/"
    else
        sprint "Cloning remote repository."
        srcdir="/home/$username/.local/src/$dotfiles_name/"
        sudo -u "$username" mkdir -p "/home/$username/.local/src"
        sudo -u "$username" sh -c "git clone --depth 1 --single-branch --no-tags $dotfiles_url /home/$username/.local/src/$dotfiles_name $cmd_suffix" ||
            {
                cd "/home/$username/.local/src/$dotfiles_name" || exit 1
                sudo -u "$username" sh -c "git pull --force origin master $cmd_suffix"
            }
        cd "/home/$username/.local/src/$dotfiles_name" || exit 1
    fi

    sudo -u "$username" rsync -a "$srcdir" "/home/$username"

    # Remove extra files
    rm "/home/$username/.gitignore" "/home/$username/LICENSE" "/home/$username/README.md"

    rm -rf "/home/$username/.git"
}

ask_username() {
    # Return and do noting if username is already set.
    [ -n "$username" ] && return

    while true; do
        printf "Username: " && read -r username
        re_match "$username" "$regex_valid_username" && break
        wprint "Username '$username' is not valid.\nGive a username beginning with a letter, with only lowercase letters, - or _.\n"
    done
}

ask_hostname() {
    # Return and do noting if hostname is already set.
    [ -n "$hostname" ] && return

    while true; do
        printf "Hostname: " && read -r hostname
        re_match "$hostname" "$regex_valid_hostname" && break
        wprint "hostname '$hostname' is not valid.\nGive a hostname beginning with a letter, with only lowercase letters, - or _.\n"
    done
}

install_essentials() {
    local essential_programs=("base-devel" "git" "rsync")

    sprint "Installing essential programs."
    for p in "${essential_programs[@]}"; do
        if check_installed "$p"; then
            sprint "'$p' is already installed."
        else
            pacman_install "$p" "Installing $p which is required to install and configure other packages."
        fi
    done
}

configure_grub() {
    sprint "Configuring grub options."

    # These configurations need to be done regardless of having swap.
    sed -i "/^GRUB_TIMEOUT=.*$/s/=.*/=3/;/^#GRUB_DISABLE_OS_PROBER=false$/s/#//" /etc/default/grub
    sed -i "/^GRUB_DEFAULT=.*$/s/=.*/=saved/;/^#GRUB_SAVEDEFAULT=true$/s/#//" /etc/default/grub
    sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/ quiet//" /etc/default/grub

    sprint "Checking swap partition."
    # Enable hibernation only if there is a swap device larger than 8G.
    blkid | grep "TYPE=\"swap\"" | cut -d " " -f1 | sed "s/://" | xargs lsblk -no SIZE | sed "s/\s\+//;s/.$//;s/\..*//" | xargs test 8 -le && {
        sprint "Enabling hibernation."
        grep -q resume /etc/mkinitcpio.conf || {
            sed -i "/^HOOKS=(.*)$/s/)$/ resume)/" /etc/mkinitcpio.conf
            eval "mkinitcpio -P $cmd_suffix"
        }
        grep -q resume /etc/default/grub || {
            swapuuid=$(blkid | grep swap | grep -Po " UUID=\".*?\"" | sed "s/ //;s/UUID=//;s/\"//g")
            sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/s/.$/ resume=UUID=$swapuuid\"/" /etc/default/grub
            eval "grub-mkconfig -o /boot/grub/grub.cfg $cmd_suffix"
            unset swapuuid
        }
    }
}

ensure_mount_points() {
    local required_mounts=("/mnt" "/mnt/home")
    [ "$bios_or_uefi" = "UEFI" ] && required_mounts+=("/mnt/efi")

    local mounted=()

    for mnt in "${required_mounts[@]}"; do
        if mountpoint -q "$mnt"; then
            mounted+=("$mnt")
        fi
    done

    if [[ ${#mounted[@]} -gt 0 ]]; then
        wprint "The following mount points are already in use: ${mounted[*]}"
        printf "Do you want to unmount them before continuing? (Y/N): "
        local answer
        read -r answer
        if [[ "$answer" =~ ^[Yy]$ ]]; then
            for mnt in "${mounted[@]}"; do
                umount -R "$mnt"
            done
        else
            nprint "Proceeding with existing mount points."
        fi
    fi

    for mnt in "${required_mounts[@]}"; do
        mountpoint -q "$mnt" || eprint "Required mountpoint '$mnt' is missing. Aborting."
    done
}

### Handling arguments ###

if [[ $# -lt 1 ]]; then
    print_help
    exit 1
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        "help") help=true; shift;;

        "arch-install")
            [ -z "$2" ] && eprint "\`arch-install\` -> you should provide a 'parition_mode' (vm, main, X220, mounted)."
            args_arch_install=true
            # shellcheck disable=2015
            re_match "$2" "^(vm|main|x220|mounted)$" && partition_mode="$2" || eprint "'$2' is not a valid partitioning mode."
            shift 2
            ;;

        "install-dotfiles") args_install_dotfiles=true; shift;;

        "install-aurhelper")
            [ -z "$2" ] && eprint "\`install-aurhelper\` -> you should provide a 'aurhelper' (yay, paru)."
            args_install_aurhelper=true 
            # shellcheck disable=2015
            re_match "$2" "^(yay|paru)$" && aurhelper="$2" || eprint "'$2' is not a valid aurhelper."
            shift 2
            ;;

        "install-env")
            args_install_env=true
            [ -z "$2" ] && environment="All" && shift && continue
            # shellcheck disable=2015
            re_match "$2" "^(Hyprland|DWM|All)$" && environment="$2" || eprint "'$2' is not a valid environment."
            shift 2
            ;;

        "-v"|"--verbose") verbose=true; cmd_suffix=""; shift;;

        "-u"|"--username")
            if [ -z "$2" ]; then
                eprint "'-u' -> You should provide a username."
            fi
            username="$2"
            if ! re_match "$username" "$regex_valid_username"; then
                eprint "Username '$username' is not valid.\nGive a username beginning with a letter, with only lowercase letters, - or _."
            fi
            shift 2
            ;;

        "-h"|"hostname")
            if [ -z "$2" ]; then
                eprint "'-h' -> You should provide a hostname."
            fi
            hostname="$2"
            if ! re_match "$hostname" "$regex_valid_hostname"; then
                eprint "Hostname '$hostname' is not valid.\nGive a hostname beginning with a letter, with only lowercase letters, - or _."
            fi
            shift 2
            ;;

        "-t"|"--timezone")
            if [ -z "$2" ]; then
                eprint "'-t' -> You should provide a timezone."
            fi
            timezone="$2"
            if ! [ -f "/usr/share/zoneinfo/$timezone" ]; then
                eprint "Timezone '$timezone' is not valid.\nView valid timezones: \`timezonectl list-timezones\`"
            fi
            shift 2
            ;;

        *) invalid_option "$1";;
    esac
done

# Set username to current user, unless running by root or explicitly specifying the username through arguments.
! isRoot && [ -z "$username" ] && username="$(id -un)"

# Set hostname to current hostname if not already provided.
[ -z "$hostname" ] && hostname="$(hostnamectl hostname 2>/dev/null || cat /etc/hostname)"

[ -n "$help" ] && print_help && exit 0

[ -n "$args_arch_install" ] && {
    is_archlinux || eprint "Can only install an ArchLinux system."
    eval "partition_$partition_mode"
    arch_install
    exit
}

[ -n "$args_install_dotfiles" ] && {
    isRoot && wheel_can_sudo
    ask_username
    install_essentials || eprint "Could not install essential programs.\nHint: Run as root."
    install_dotfiles
    exit
}

[ -n "$args_install_aurhelper" ] && {
    isRoot || eprint "Only root can install packages."
    wheel_can_sudo
    ask_username
    install_essentials
    install_aurhelper
}

[ -n "$args_install_env" ] && {
    isRoot || eprint "Only root can install packages."
    ensure_programs_file
    clean_programs_file
    wheel_can_sudo
    ask_username
    install_essentials
    install_aurhelper
    install_environment "$environment"
}
